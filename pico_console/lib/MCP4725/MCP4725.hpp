#pragma once
#include "pico/stdlib.h"
#include "hardware/gpio.h"
#include "hardware/i2c.h"

#define DAC_I2C_CH i2c0
#define DAC_L 0x60 // dac (L) address
#define DAC_R 0x61 // dac (R) address

#define DAC_HW_MAX 4095
#define DAC_CH_MAX 4
#define DAC_VOL_MAX 255
#define WAVE_LENGTH 128

#define WAVE_RES 10000    // 계산 정확도
#define WAVE_FREQ 10000.0 // 샘플링 주파수

#define USING_CH 4

const float DAC_wave_none[WAVE_LENGTH] = {0,};

const float DAC_wave_pulse_25[WAVE_LENGTH] = { // 0 ~ 4095
  4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095,
  4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0
};

const float DAC_wave_pulse_50[WAVE_LENGTH] = { // 0 ~ 4095
  4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095,
  4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095,
  4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095,
  4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0
};

const float DAC_wave_pulse_75[WAVE_LENGTH] = { // 0 ~ 4095
  4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095,
  4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095,
  4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095,
  4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095,
  4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095,
  4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0
};

const float DAC_wave_triangle[WAVE_LENGTH] = { // 0 ~ 4095
     0,   63,  127,  191,  255,  319,  383,  447,  511,  575,  639,  703,  767,  831,  895,  959,
  1023, 1087, 1151, 1215, 1279, 1343, 1407, 1471, 1535, 1599, 1663, 1727, 1791, 1855, 1919, 1983,
  2047, 2111, 2175, 2239, 2303, 2367, 2431, 2495, 2559, 2623, 2687, 2751, 2815, 2879, 2943, 3007,
  3071, 3135, 3199, 3263, 3327, 3391, 3455, 3519, 3583, 3647, 3711, 3775, 3839, 3903, 3967, 4031,
  4095, 4031, 3967, 3903, 3839, 3775, 3711, 3647, 3583, 3519, 3455, 3391, 3327, 3263, 3199, 3135,
  3071, 3007, 2943, 2879, 2815, 2751, 2687, 2623, 2559, 2495, 2431, 2367, 2303, 2239, 2175, 2111,
  2047, 1983, 1919, 1855, 1791, 1727, 1663, 1599, 1535, 1471, 1407, 1343, 1279, 1215, 1151, 1087,
  1023,  959,  895,  831,  767,  703,  639,  575,  511,  447,  383,  319,  255,  191,  127,   63
};

const float DAC_wave_sawtooth[WAVE_LENGTH] = { // 0 ~ 4095
  4095, 4062, 4030, 3998, 3966, 3933, 3901, 3869, 3837, 3804, 3772, 3740, 3708, 3675, 3643, 3611,
  3579, 3546, 3514, 3482, 3450, 3417, 3385, 3353, 3321, 3288, 3256, 3224, 3192, 3159, 3127, 3095,
  3063, 3030, 2998, 2966, 2934, 2901, 2869, 2837, 2805, 2772, 2740, 2708, 2676, 2644, 2611, 2579,
  2547, 2515, 2482, 2450, 2418, 2386, 2353, 2321, 2289, 2257, 2224, 2192, 2160, 2128, 2095, 2063,
  2031, 1999, 1966, 1934, 1902, 1870, 1837, 1805, 1773, 1741, 1708, 1676, 1644, 1612, 1579, 1547,
  1515, 1483, 1450, 1418, 1386, 1354, 1322, 1289, 1257, 1225, 1193, 1160, 1128, 1096, 1064, 1031,
   999,  967,  935,  902,  870,  838,  806,  773,  741,  709,  677,  644,  612,  580,  548,  515,
   483,  451,  419,  386,  354,  322,  290,  257,  225,  193,  161,  128,   96,   64,   32,    0
};

const float DAC_wave_sine[WAVE_LENGTH] = { // 0 ~ 4095
     0,    2,    9,   22,   39,   61,   88,  119,  155,  196,  241,  291,  345,  402,  464,  530,
   599,  672,  748,  827,  909,  994, 1082, 1172, 1263, 1357, 1453, 1549, 1648, 1747, 1846, 1947,
  2047, 2147, 2248, 2347, 2446, 2545, 2641, 2737, 2831, 2922, 3012, 3100, 3185, 3267, 3346, 3422,
  3495, 3564, 3630, 3692, 3749, 3803, 3853, 3898, 3939, 3975, 4006, 4033, 4055, 4072, 4085, 4092,
  4095, 4092, 4085, 4072, 4055, 4033, 4006, 3975, 3939, 3898, 3853, 3803, 3749, 3692, 3630, 3564,
  3495, 3422, 3346, 3267, 3185, 3100, 3012, 2922, 2831, 2737, 2641, 2545, 2446, 2347, 2248, 2147,
  2047, 1947, 1846, 1747, 1648, 1549, 1453, 1357, 1263, 1172, 1082,  994,  909,  827,  748,  672,
   599,  530,  464,  402,  345,  291,  241,  196,  155,  119,   88,   61,   39,   22,    9,    2
};

const float DAC_wave_noise[WAVE_LENGTH] = { // 0 ~ 4095
  4095, 4095,    0,    0,    0, 4095, 4095,    0, 4095,    0, 4095, 4095, 4095, 4095,    0, 4095,
     0, 4095, 4095,    0,    0,    0,    0, 4095, 4095, 4095, 4095,    0, 4095, 4095, 4095, 4095,
     0,    0,    0, 4095,    0,    0, 4095, 4095, 4095,    0, 4095,    0,    0,    0, 4095, 4095,
  4095, 4095,    0, 4095,    0, 4095,    0,    0,    0,    0, 4095, 4095, 4095,    0,    0,    0,
     0,    0, 4095, 4095, 4095, 4095,    0, 4095,    0, 4095, 4095,    0, 4095,    0,    0, 4095,
  4095,    0,    0, 4095,    0,    0, 4095,    0, 4095, 4095,    0, 4095,    0,    0, 4095, 4095,
     0,    0,    0,    0, 4095,    0,    0,    0, 4095,    0, 4095,    0, 4095, 4095, 4095, 4095,
     0, 4095,    0, 4095, 4095,    0,    0, 4095, 4095, 4095,    0, 4095, 4095, 4095,    0,    0
};

volatile typedef struct _dac_set_t {
  float         volume;     // dac volume (0~1)
  unsigned int  wave_count; // dac wave count (0~127)
  unsigned int  count;      // dac count (x1000)
  unsigned int  count_up;   // dac count up value (x1000)
  const float*  wave;       // dac wave (pointer)
} dac_set_t;

enum wave {
  W_NONE = 0,
  W_PS25,
  W_PS50,
  W_PS75,
  W_TRIN,
  W_SAWT,
  W_SINE,
  W_NOIZ,
};

enum note {
  S_NN = 0,
  S_C, S_Cs,
  S_D, S_Ds,
  S_E,
  S_F, S_Fs,
  S_G, S_Gs,
  S_A, S_As,
  S_B
};

enum op_code {
  OP_NONE = 0x00,
  OP_DELAY1,
  OP_DELAY2,
  OP_DELAY3,
  OP_DELAY4,
  OP_MUTE = 0x10,
  OP_STOP = 0xFF
};

bool timer_callback_mcp4725(struct repeating_timer *t);
int64_t delay_callback(alarm_id_t id, void *user_data);

class MCP4725 {
  public:
    MCP4725(int pin_scl, int pin_sda);

    void init(void);
    void data(uint8_t addr, uint16_t data);
    void menual_beep(uint32_t ms);
    void menual_mute(void);

    void beep(uint32_t ms);
    void set_mute(bool mute);
    void set_waning(uint32_t waning);
    void sound_waning(void);

    void delay(uint32_t ms);
    void channel_set(uint8_t channel, float freq, uint8_t volume);
    void channel_wave(uint8_t channel, float freq, uint8_t volume, const float* wave);
    void channel_stop(uint8_t channel);

    void play_sound(uint16_t (*music_table)[USING_CH]);
    void play_music(uint16_t (*music_table)[USING_CH], uint32_t music_length, uint32_t music_delay);

    void play_sound_ex(const uint32_t music_table);
    void play_music_ex(const uint32_t *music_table, uint32_t music_length, uint32_t music_delay);

  private:
    int _pin_scl, _pin_sda;
    int music_table_pos;
    float _sound_waning;
};